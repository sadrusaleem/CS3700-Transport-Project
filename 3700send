#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import json
import errno
from time import time, sleep
from decimal import Decimal
import traceback

from logger import Logger

MSG_SIZE = 1500
DATA_SIZE = 1000
SOCKET_TIMEOUT = .05 #time in seconds to wait for data when reading from socket
# 0 means trust new RTT all the way
# 1 means trust the old RTT all the way
NEW_RTT_LEAN = .875
# RTO will be 5 * RTT
RTO_TO_RTT_FACTOR = 5

INITIAL_SS_THRESH = 10

END_STATE_TIMEOUT = 5 #time in seconds of sending EOFs and waiting for an ack

log = Logger({
    "eof": "[eof] reached EOF",
    "transfer_complete": "[sender completed]",
    "packet_sent": "[send data] {seq_num} ({len})",
    "packet_incomplete": "[error] packet send failed before completion",
    "packet_ack": "[send received-ack] {seq_num}",
    "packet_corrupt": "[recv corrupt packet] received corrupt packet\n{error}\n",
    "packet_retransmit": "[retransmit packet] {seq_num}",
    "rtt_update": "[rtt update] old: {old:1.3f}s, sample: {sample:1.3f}s, new: {new:1.3f}s",
    "cwnd_update": "[cwnd update] old: {old}, new: {new}",
    "cwnd_reset": "[cwnd RESET] old: {old}, new: 1",
    "send_fin": "[sender sent fin]",
    "end_state_timeout": "[timeout] while waiting for an EOF ack"
}, stdout=sys.stderr)


def main(recv_host, recv_port):
    Sender(recv_host, int(recv_port)).start()

class Sender():
    def __init__(self, recv_host, recv_port):
        # Bind to localhost and an ephemeral port
        self.dest = (recv_host, recv_port)

        # Set up the socket
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.sock.settimeout(SOCKET_TIMEOUT)  # want the socket to be non-blocking

        self.sequence = 0
        self.cwnd = Decimal(1.0)  # floor(cwnd) = number of un-acked packets allowed to be in flight
        self.packet_buffer = {}  # keep track of un-acked packets (maps sequence nums to packets)

        # these will get set once we get our first sample
        self.rto = None
        self.rtt = None

        #when cwnd < ssthresh, slow start (exponential increase), else congestion avoidance (linear increase)
        self.ssthresh = INITIAL_SS_THRESH

    def start(self):
        try:
            while True:
                if not self.send_packets() and not self.packet_buffer:
                    #have reached the end of the file and all packets have been ack'ed
                    self.end_state()
                    break;

                self.ack_packets()
                self.retransmit_packets()
                #sleep(.05) #idk why this is necessary but this stops it from hanging randomly
            log.success("transfer_complete")
            sys.stdout.flush()
        except Exception:
            traceback.print_exc()

    def end_state(self):
        #we have sent and acked all the data
        #now we just have to send the eof and ensure that the receiver gets it
        log.info("eof")
        start = time()

        while True:
            if (time() - start > END_STATE_TIMEOUT):
                log.info("end_state_timeout")
                break

            log.info("send_fin")
            self.sock.sendto(json.dumps({
                "sequence": self.sequence,
                "data": "",
                "ack": False,
                "eof": True,
            }), self.dest)

            #look for ack
            result = self.recv_packets()

            if result:
                data, addr = result
                decoded = json.loads(data)

                if decoded.get('fin_ack'):
                    #can end now
                    break

    def send_packets(self):
        while len(self.packet_buffer) < int(self.cwnd): #floor of cwnd
            # can push more packets onto the wire
            data = sys.stdin.read(DATA_SIZE)
            if len(data) > 0:
                msg = json.dumps({
                    "sequence": self.sequence,
                    "data": data,
                    "ack": False,
                    "eof": False
                })

                if self.send_packet(msg):
                    log.success("packet_sent",
                        seq_num=self.sequence,
                        len=len(data))

                    self.sequence += len(data)
                    self.packet_buffer[self.sequence] = {
                        "msg": msg,
                        "time_sent": time()
                    }
            else:
                return False

        return True

    def send_packet(self, msg):
        if self.sock.sendto(msg, self.dest) < len(msg):
            log.err("packet_incomplete")
            return False
        return True

    def ack_packets(self):
        # Now read in data, send packets
        result = self.recv_packets()

        while result:
            data, addr = result
            try:
                decoded = json.loads(data)

                if decoded.get('fin_ack'):
                    self.fin_ack_received = True
                    return

                ack_num = decoded.get("ack")

                acked_packet = self.packet_buffer.pop(ack_num)  # throws error if ack_num isn't there

                # know we successfully ack'ed a packet if we get here
                log.success("packet_ack", seq_num=ack_num - DATA_SIZE) #the ack num sent back is start seq + DATA_SIZE
                self.update_rtt(time() - acked_packet["time_sent"])

                self.increase_cwnd()
            except KeyError:
                #means we received a duplicate ack
                pass
            except Exception, e:
                log.info("packet_corrupt", error="")

            result = self.recv_packets()

    def increase_cwnd(self):
        new_cwnd = None

        if self.cwnd < self.ssthresh:
            # slow start
            new_cwnd = self.cwnd + Decimal(1)
        else:
            # congestion avoidance
            new_cwnd = self.cwnd + Decimal(1)/self.cwnd

        log.info("cwnd_update", old=self.cwnd, new=new_cwnd)
        self.cwnd = new_cwnd

    def update_rtt(self, new_sample):
        old_rtt = self.rtt or 0
        if self.rtt:
            self.rtt = (NEW_RTT_LEAN * self.rtt) + ((1 - NEW_RTT_LEAN) * new_sample)
        else:
            self.rtt = new_sample
        self.rto = self.rtt * RTO_TO_RTT_FACTOR
        log.info("rtt_update", old=old_rtt, sample=new_sample, new=self.rtt)

    def recv_packets(self):
        # returns msg or None if unable to read, doesn't block
        try:
            return self.sock.recvfrom(MSG_SIZE)
        except Exception:
            return None

    def retransmit_packets(self):
        curr_time = time()

        for seq,data in self.packet_buffer.iteritems():
            time_sent, msg = data["time_sent"], data["msg"]

            if self.rto and (curr_time - time_sent) > self.rto:
                if self.send_packet(msg):
                    log.info("packet_retransmit", seq_num = seq - DATA_SIZE) #the seq num in packet_buffer maps the end seq #
                    data["time_sent"] = curr_time

                log.info("cwnd_reset", old=self.cwnd)
                self.ssthresh = self.cwnd // 2 #floor division
                self.cwnd = Decimal(1)

            if not self.rto and len(self.packet_buffer) == 1:
                #we are on the first packet and it was not ack'ed yet
                #all the other variables (cwnd etc..) are irrelevant right now since we only have one packet
                self.send_packet(msg)


if __name__ == "__main__":
    main(*sys.argv[1].split(":"))
