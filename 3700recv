#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import json
import errno

from logger import Logger


MSG_SIZE = 1500
TIMEOUT = 5


log = Logger({
    "port_bound": "[bound] {port}",
    "transfer_complete": "[receiver completed]",
    "packet_recv": "[recv data] {start} ({length}) {status}",
    "packet_corrupt": "[recv corrupt packet]",
    "err_timeout": "[error] timeout waiting to read input data",
    "packet_incomplete": "[error] packet send failed before completion",
    "out_of_order_print": "[out of order print] {start}",
    "fin_ack": "[receiver fin_ack sent]"
}, stdout=sys.stderr)


def main():
    Receiver().start()


class Receiver():
    def __init__(self):
        # Set up the socket
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.sock.bind(("", 0))
        self.sock.settimeout(0)

        # Get port we bound to
        UDP_PORT = int(self.sock.getsockname()[1])

        # For some reason, the first will not print. Why? I don't know.
        log.success("port_bound", port=UDP_PORT)
        log.success("port_bound", port=UDP_PORT)

        self.next_sequence_to_print = 0

        #buffer for receiving out-of-order packets
        self.packet_buffer = {} #maps start seq nums to the data that needs to be printed when we get to that seq num

    def recv_packet(self):
        # returns msg or None if unable to read, doesn't block
        try:
            return self.sock.recvfrom(MSG_SIZE)
        except socket.error, e:
            if e.args[0] not in (errno.EAGAIN, errno.EWOULDBLOCK):
                # a "real" error occurred, otheriwse there was just no data available
                log.err("error_read", error=str(e))
            return None

    def start(self):
        # Now listen for packets
        while True:
            result = self.recv_packet()

            # If nothing is ready, we hit the timeout
            if result:
                data, addr = result

                try:
                    decoded = json.loads(data)

                    # If the EOF flag is set, exit
                    if (decoded["eof"]):
                        log.success("transfer_complete")
                        self.fin_ack(addr)
                        break

                    data, seq = decoded["data"], decoded["sequence"]
                    length = len(data)

                    # If there is data, we accept it and print it out
                    if (data):
                        status = ""
                        ack_num = seq + length

                        if seq == self.next_sequence_to_print:
                            status = "ACCEPTED (in-order)"
                            sys.stdout.write(data)
                            self.next_sequence_to_print += length
                            self.ack(ack_num, addr)

                            self.write_out_of_order_packets()
                        elif seq < self.next_sequence_to_print:
                            status = "DUPLICATE RECIEVED AND ACKED"
                            self.ack(ack_num, addr)
                        elif seq > self.next_sequence_to_print:
                            status = "ACCEPTED (out-of-order)"
                            self.ack(ack_num, addr)
                            self.packet_buffer[seq] = data

                        log.success("packet_recv",
                            start=seq, length=length, status=status)

                except Exception, e:
                    log.info("packet_corrupt")
            else:
                #nothing to read right now
                pass

    def ack(self, ack_num, addr):
        # Send back an ack to the sender
        msg = json.dumps({"ack": ack_num})

        if self.sock.sendto(msg, addr) < len(msg):
            log.info("packet_incomplete")

    def fin_ack(self, addr):
        # Send back an ack to the sender
        msg = json.dumps({"fin_ack": True})

        for i in range(5):
            if self.sock.sendto(msg, addr) < len(msg):
                log.info("packet_incomplete")
            else:
                log.info("fin_ack")

    def write_out_of_order_packets(self):
        try:
            data = self.packet_buffer.pop(self.next_sequence_to_print)
            # made it here so we know data exists
            log.info("out_of_order_print", start=self.next_sequence_to_print)
            sys.stdout.write(data)
            self.next_sequence_to_print += len(data)
            self.write_out_of_order_packets() #see if there are any more to print
        except Exception, e:
            return



if __name__ == "__main__":
    main()
